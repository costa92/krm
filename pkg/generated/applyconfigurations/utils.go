// Copyright 2024 Qiuhong Long <costa9293@gmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/costa92/krm.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1beta1 "github.com/costa92/krm/pkg/apis/apps/v1beta1"
	appsv1beta1 "github.com/costa92/krm/pkg/generated/applyconfigurations/apps/v1beta1"
	autoscalingv1 "github.com/costa92/krm/pkg/generated/applyconfigurations/autoscaling/v1"
	generatedapplyconfigurationsmetav1 "github.com/costa92/krm/pkg/generated/applyconfigurations/meta/v1"
	v1 "k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	applyconfigurationsmetav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=apps.onex.io, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithKind("Chain"):
		return &appsv1beta1.ChainApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ChainSpec"):
		return &appsv1beta1.ChainSpecApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ChainStatus"):
		return &appsv1beta1.ChainStatusApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("Condition"):
		return &appsv1beta1.ConditionApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("LocalObjectReference"):
		return &appsv1beta1.LocalObjectReferenceApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("Miner"):
		return &appsv1beta1.MinerApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("MinerAddress"):
		return &appsv1beta1.MinerAddressApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("MinerSpec"):
		return &appsv1beta1.MinerSpecApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("MinerStatus"):
		return &appsv1beta1.MinerStatusApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("ObjectMeta"):
		return &appsv1beta1.ObjectMetaApplyConfiguration{}

		// Group=autoscaling, Version=v1
	case v1.SchemeGroupVersion.WithKind("CrossVersionObjectReference"):
		return &autoscalingv1.CrossVersionObjectReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HorizontalPodAutoscaler"):
		return &autoscalingv1.HorizontalPodAutoscalerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerSpec"):
		return &autoscalingv1.HorizontalPodAutoscalerSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerStatus"):
		return &autoscalingv1.HorizontalPodAutoscalerStatusApplyConfiguration{}

		// Group=meta.k8s.io, Version=v1
	case metav1.SchemeGroupVersion.WithKind("Condition"):
		return &applyconfigurationsmetav1.ConditionApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("DeleteOptions"):
		return &applyconfigurationsmetav1.DeleteOptionsApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("LabelSelector"):
		return &applyconfigurationsmetav1.LabelSelectorApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("LabelSelectorRequirement"):
		return &applyconfigurationsmetav1.LabelSelectorRequirementApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("ManagedFieldsEntry"):
		return &generatedapplyconfigurationsmetav1.ManagedFieldsEntryApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("ObjectMeta"):
		return &generatedapplyconfigurationsmetav1.ObjectMetaApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("OwnerReference"):
		return &generatedapplyconfigurationsmetav1.OwnerReferenceApplyConfiguration{}
	case metav1.SchemeGroupVersion.WithKind("TypeMeta"):
		return &generatedapplyconfigurationsmetav1.TypeMetaApplyConfiguration{}

	}
	return nil
}
