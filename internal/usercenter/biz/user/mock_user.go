// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/costa92/krm/internal/usercenter/biz/user (interfaces: UserBiz)

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	v1 "github.com/costa92/krm/pkg/api/usercenter/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockUserBiz is a mock of UserBiz interface.
type MockUserBiz struct {
	ctrl     *gomock.Controller
	recorder *MockUserBizMockRecorder
}

// MockUserBizMockRecorder is the mock recorder for MockUserBiz.
type MockUserBizMockRecorder struct {
	mock *MockUserBiz
}

// NewMockUserBiz creates a new mock instance.
func NewMockUserBiz(ctrl *gomock.Controller) *MockUserBiz {
	mock := &MockUserBiz{ctrl: ctrl}
	mock.recorder = &MockUserBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBiz) EXPECT() *MockUserBizMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserBiz) Create(arg0 context.Context, arg1 *v1.CreateUserRequest) (*v1.UserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserBizMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserBiz)(nil).Create), arg0, arg1)
}
